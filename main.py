import os

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           Message, InlineKeyboardMarkup,
                           InlineKeyboardButton)
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

api = os.getenv("API_TOKEN")
bot = Bot(token=api)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

MAX_QUESTION_LENGTH = 700
MAX_ANSWER_LENGTH = 2000
MAX_VISIBLE_QUESTIONS = 3

CURATOR_ID = os.getenv("CURATOR_ID")
user_data_storage = {}
pending_responses = {}


class UserState(StatesGroup):
    waiting_for_contact = State()
    waiting_for_question = State()


class CuratorState(StatesGroup):
    waiting_for_response = State()


from html import escape


def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
    return escape(text)


def get_contact_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True))
    return kb


def get_question_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å'))
    return kb


def format_question_history(questions):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if len(questions) <= MAX_VISIBLE_QUESTIONS:
        return "\n".join([f"{i + 1}. {q[:150]}{'...' if len(q) > 150 else ''}" for i, q in enumerate(questions)])

    visible = questions[-MAX_VISIBLE_QUESTIONS:]
    history_text = "\n".join(
        [f"{len(questions) - MAX_VISIBLE_QUESTIONS + i + 1}. {q[:150]}{'...' if len(q) > 150 else ''}"
         for i, q in enumerate(visible)])
    return f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ {MAX_VISIBLE_QUESTIONS} –≤–æ–ø—Ä–æ—Å–∞ (–≤—Å–µ–≥–æ {len(questions)}):\n{history_text}"


def create_curator_keyboard(user_id, has_history=False):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä—É"""
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"))
    if has_history:
        kb.add(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é", callback_data=f"full_history_{user_id}"))
    return kb


def is_valid_message(message: types.Message, is_question: bool) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ (–≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç)"""
    if not message.text:
        return False
    max_len = MAX_QUESTION_LENGTH if is_question else MAX_ANSWER_LENGTH
    return len(message.text) <= max_len


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
@dp.message_handler(commands=['start'])
async def starting(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data_storage:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ª–∏–º–ø–∏–∞–¥—ã.')
        await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–¥–µ–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è —Å–≤—è–∑–∏ üëá',
                             reply_markup=get_contact_keyboard())
        await UserState.waiting_for_contact.set()
    else:
        await message.answer(f"–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫—É—Ä–∞—Ç–æ—Ä—É (–Ω–µ –±–æ–ª–µ–µ {MAX_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
                             reply_markup=types.ReplyKeyboardRemove())
        await UserState.waiting_for_question.set()


@dp.message_handler(content_types=['contact'], state=UserState.waiting_for_contact)
async def handle_contact(message: Message, state: FSMContext):
    contact = message.contact
    user_id = message.from_user.id

    if contact.user_id == user_id:
        user_data_storage[user_id] = {
            'phone_number': contact.phone_number,
            'full_name': message.from_user.full_name,
            'username': f"@{message.from_user.username}" if message.from_user.username else "–ù–µ—Ç username",
            'questions': []
        }

        await message.answer(f"–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫—É—Ä–∞—Ç–æ—Ä—É (–Ω–µ –±–æ–ª–µ–µ {MAX_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
                             reply_markup=types.ReplyKeyboardRemove())
        await UserState.waiting_for_question.set()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç!",
                             reply_markup=get_contact_keyboard())


@dp.message_handler(text='–ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å', state='*')
async def ask_another_question(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data_storage:
        await message.answer(f"–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫—É—Ä–∞—Ç–æ—Ä—É (–Ω–µ –±–æ–ª–µ–µ {MAX_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
                             reply_markup=types.ReplyKeyboardRemove())
        await UserState.waiting_for_question.set()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start",
                             reply_markup=get_contact_keyboard())


@dp.message_handler(state=UserState.waiting_for_question, content_types=types.ContentTypes.TEXT)
async def handle_question(message: types.Message, state: FSMContext):
    if not is_valid_message(message, is_question=True):
        await message.answer(
            f"‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –≤–æ–ø—Ä–æ—Å {MAX_QUESTION_LENGTH} —Å–∏–º–≤–æ–ª–∞–º–∏.")
        return

    user_id = message.from_user.id
    question = escape_html(message.text)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã

    if user_id in user_data_storage:
        user_data = user_data_storage[user_id]
        user_data['questions'].append(question)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
        question_history = format_question_history(user_data['questions'])
        has_history = len(user_data['questions']) > MAX_VISIBLE_QUESTIONS

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞
        msg_text = (
            f"üìå –í–æ–ø—Ä–æ—Å –æ—Ç {escape_html(user_data['full_name'])} (ID: <code>{user_id}</code>)\n"
            f"üì± {escape_html(user_data['username'])} | ‚òéÔ∏è {escape_html(user_data['phone_number'])}\n\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question[:500]}{'...' if len(question) > 500 else ''}\n\n"
            f"{question_history}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∫—É—Ä–∞—Ç–æ—Ä—É
        msg = await bot.send_message(
            CURATOR_ID,
            msg_text,
            parse_mode="HTML",
            reply_markup=create_curator_keyboard(user_id, has_history)
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        pending_responses[msg.message_id] = {
            'user_id': user_id,
            'question': question
        }

        await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                             reply_markup=get_question_keyboard())
        await state.finish()
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start",
                             reply_markup=get_contact_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query_handler(lambda c: c.data.startswith('reply_'))
async def process_reply_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    await bot.answer_callback_query(callback_query.id)

    user_data = user_data_storage.get(user_id, {})

    await bot.send_message(
        callback_query.from_user.id,
        f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –±–æ–ª–µ–µ {MAX_ANSWER_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
        f"üë§: {user_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üì±: {user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üÜî: <code>{user_id}</code>\n\n"
        f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
        parse_mode="HTML"
    )

    await CuratorState.waiting_for_response.set()
    await dp.current_state(user=callback_query.from_user.id).update_data(
        target_user_id=user_id
    )


@dp.callback_query_handler(lambda c: c.data.startswith('full_history_'))
async def show_full_history(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[2])
    user_data = user_data_storage.get(user_id, {})

    if not user_data.get('questions'):
        await bot.answer_callback_query(callback_query.id, "–ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")
        return

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–Ω–æ–≥–æ (>10), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
    if len(user_data['questions']) > 10:
        filename = f"questions_{user_id}.txt"
        with open(filename, "w", encoding='utf-8') as f:
            f.write("\n".join([f"{i + 1}. {q}" for i, q in enumerate(user_data['questions'])]))

        await bot.send_document(
            callback_query.from_user.id,
            types.InputFile(filename),
            caption=f"üìú –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç {user_data['full_name']} (ID: {user_id})"
        )
        os.remove(filename)
    else:
        full_history = "\n".join([f"{i + 1}. {q}" for i, q in enumerate(user_data['questions'])])
        await bot.send_message(
            callback_query.from_user.id,
            f"üìú –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç {user_data['full_name']} (ID: {user_id}):\n\n{full_history}",
            parse_mode="HTML"
        )

    await bot.answer_callback_query(callback_query.id)


@dp.message_handler(state=CuratorState.waiting_for_response, content_types=types.ContentTypes.TEXT)
async def handle_curator_response(message: types.Message, state: FSMContext):
    if len(message.text) > MAX_ANSWER_LENGTH:
        await message.answer(
            f"‚ùå –í–∞—à –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –æ—Ç–≤–µ—Ç {MAX_ANSWER_LENGTH} —Å–∏–º–≤–æ–ª–∞–º–∏.")
        return

    data = await state.get_data()
    user_id = data['target_user_id']

    if user_id in user_data_storage:
        try:
            await bot.send_message(
                user_id,
                f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
            )
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—É!")
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {str(e)}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
